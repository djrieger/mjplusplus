#include "ProtoMemberVisitor.hpp"
#include "StatementVisitor.hpp"

ProtoMemberVisitor::ProtoMemberVisitor(ClassTypeVisitor& classVisitor): classVisitor(classVisitor)
{
	setOwner(classVisitor.getOwner());
}

void ProtoMemberVisitor::visit(shptr<const ast::MethodDeclaration> methodDeclaration)
{
	std::cout << "  Visiting method " << methodDeclaration->mangle() << std::endl;

	std::string mangledMethodName = methodDeclaration->mangle();

	// ignore println as its implementation is generated by FirmInterface::build automatically
	if (mangledMethodName != "_Cout_Mprintln")
	{
		ir_entity* ent = FirmInterface::getInstance().createMethodEntity(owner, methodDeclaration);

		std::cout << "Inserting into classMethodEntities global type, method with name: " << methodDeclaration->getName() << ", ent: " << ent << std::endl;
		FirmInterface::getInstance().addMethod(get_glob_type(), mangledMethodName, ent);
	}
}

void ProtoMemberVisitor::visit(shptr<const ast::MainMethodDeclaration>)
{
	;
}

void ProtoMemberVisitor::visit(shptr<const ast::FieldDeclaration> fieldDeclaration)
{
	std::cout << "  Visiting field " << fieldDeclaration->mangle() << std::endl;

	// TODO switch on fieldDeclaration->getType()
	auto fieldASTType = fieldDeclaration->getType();
	ir_type* field_ir_type = FirmInterface::getInstance().getType(fieldASTType);
	// expand class for this member. TODO: not everything needs 8 bytes, try to pack things
	std::cout << "OWNER= " << owner << std::endl;
	auto offset = get_type_size_bytes(owner);

	//TODO: segfault!
	set_type_size_bytes(owner, offset + 8U);
	ir_entity* field = new_entity(owner,
	                              new_id_from_str(fieldDeclaration->mangle().c_str()),
	                              field_ir_type);
	FirmInterface::getInstance().addField(owner, fieldDeclaration->getName(), field);
	set_entity_offset(field, offset);
}

ir_graph* ProtoMemberVisitor::getGraph() const
{
	return function_graph;
}
