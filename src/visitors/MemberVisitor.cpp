#include "MemberVisitor.hpp"
#include "StatementVisitor.hpp"

MemberVisitor::MemberVisitor(ClassVisitor& classVisitor): classVisitor(classVisitor)
{
	setOwner(classVisitor.getOwner());
}

void MemberVisitor::visitMethodBodyAndFinalize(shptr<const ast::MethodDeclaration> methodDeclaration, ir_graph* irg)
{
	// create initial basic block for method body
	/*ir_node* initialBlock = new_Block(0, NULL);
	add_immBlock_pred(initialBlock, get_irg_start_block(irg));
	set_cur_block(initialBlock);*/
	set_cur_block(get_irg_start_block(irg));

	methodDeclaration->createVariablePositions();

	StatementVisitor stmtVisitor(*this);

	if (methodDeclaration->getBlock())
	{
		//methodDeclaration->getParameters();
		ir_node* start = get_irg_start(irg);
		ir_node* args = new_Proj(start, mode_T, pn_Start_T_args);
		ir_entity* m_ent = get_irg_entity(irg);
		ir_type* m_type = get_entity_type(m_ent);
		size_t param_count = get_method_n_params(m_type);

		for (size_t i = 0; i < param_count; i++)
		{
			ir_type* p_type = get_method_param_type(m_type, i);
			ir_node* arg = new_Proj(args, get_type_mode(p_type), i);
			set_value(i, arg);
		}

		methodDeclaration->getBlock()->accept(stmtVisitor);
	}
	else
		std::cout << "  Empty method body" << std::endl;

	// current block did not contain a return statement, add one:
	if (get_cur_block())
	{
		std::cout << "adding default return firm node at end of method" << std::endl;
		ir_node* currentMemState = get_store();
		ir_node* x = new_Return(currentMemState, 0, NULL);
		add_immBlock_pred(get_irg_end_block(irg), x);
	}

	irg_finalize_cons(irg);
}

void MemberVisitor::visit(shptr<const ast::MethodDeclaration> methodDeclaration)
{
	std::cout << "  Visiting method " << methodDeclaration->mangle() << std::endl;

	std::string mangledMethodName = methodDeclaration->mangle();

	// ignore println as its implementation is generated by FirmInterface::build automatically
	if (mangledMethodName != "_COut_Mprintln")
	{
		ir_entity* ent = FirmInterface::getInstance().getMethodEntity(owner, mangledMethodName);

		std::cout << "Revisiting MethodDeclaration: " << mangledMethodName << ", ent: " << ent << std::endl;

		function_graph = new_ir_graph(ent, methodDeclaration->countVariableDeclarations());
		set_current_ir_graph(function_graph);

		visitMethodBodyAndFinalize(methodDeclaration, function_graph);
	}
}

void MemberVisitor::visit(shptr<const ast::MainMethodDeclaration> mainMethodDecl)
{
	std::string mainMethodName = "main";

	std::cout << "  Visiting main method " << mainMethodName << std::endl;

	ir_type* proc_main = new_type_method(0, 0);
	ir_type* globalOwner = get_glob_type();
	ir_entity* mainMethodEntity = new_entity(globalOwner, new_id_from_str(mainMethodName.c_str()), proc_main);
	ir_graph* irg = new_ir_graph(mainMethodEntity, mainMethodDecl->countVariableDeclarations());

	set_current_ir_graph(irg);


	std::cout << "  Building System" << std::endl;
	FirmInterface::getInstance().initSystem();
	std::cout << "  Done Building System" << std::endl;

	visitMethodBodyAndFinalize(mainMethodDecl, irg);
}

void MemberVisitor::visit(shptr<const ast::FieldDeclaration> fieldDeclaration)
{
	;
}

ir_graph* MemberVisitor::getGraph() const
{
	return function_graph;
}
