Simon_001: empty file, no println
Simon_002: single println in main
Simon_003: multiple printlns in main
Simon_004: arithmetic expressions
Simon_005: new object creation, method call (same class)
Simon_006: local variable, method call (same class) with return value
Simon_007: function call with parameter
Simon_008: local variable set and read
Simon_009: local variable set (expression contains updated variable)
Simon_010: local variable set (more variables)
Simon_011: single assignment expression within expression
Simon_012: multiple assignment expressions within expression
Simon_013: single assignment expressions within expression with variable reuse
Simon_014: assignment chaining
Simon_015: new object creation, zero-initialized field access
Simon_016: field set
Simon_017: field read and set in same expression
Simon_018: different objects with different fields
Simon_019: objects with the same reference
Simon_020: reference type object, chained field access
Simon_021: method with expression in return
Simon_022: parameter set
Simon_023: multiple parameters
Simon_024: multiple function calls in expression
Simon_025: function call in return
Simon_026: reference type as parameter
Simon_027: reference type as return type
Simon_028: multiple non-pure function calls in one expression
Simon_029: assignment of reference value in expression
Simon_030: array generation, initialization and simple array access
Simon_031: array access with expressions
Simon_032: arrays as parameter
Simon_033: arrays as return value
Simon_034: array read and set of different indices
Simon_035: array read and set of same index
Simon_036: array access in array index
Simon_037: multidimensional arrays
Simon_038: multidimensional arrays with same reference for multiple subarray
Simon_039: nested function calls
Simon_040: nested function calls of non-pure functions
Simon_041: method chaining of pure functions
Simon_042: method chaining of non-pure functions
Simon_043: fields from different classes
Simon_044: method calls from different classes
Simon_045: this as parameter
Simon_046: single linked list
Simon_047: arrays as fields
Simon_048: chaining of method and fields
Simon_049: field shadowed by local variable
Simon_050: different System.out.println() methods
Simon_051: field contains this pointer
Simon_052: variable use in own initializer (with assignment)
Simon_053: integer overflow handling
Simon_054: println ( MIN_INT )
Simon_055: handling of minus MIN_INT
Simon_056: arrays of objects
Simon_057: chain of field accesses and array accesses
Simon_058: chain of method invocation and array accesses
Simon_059: chain of all postfix operations
Simon_060: threedimensional arrays with pointers to same subarrays
Simon_061: nesting of multiple parameters
Simon_062: multiple parameters with assignments
Simon_063: multiple parameters with field assignments (not used in function)
Simon_064: nesting of multiple parameters with non-pure functions
Simon_065: array access with assignment in index
Simon_066: array assignment with assignment in index
Simon_067: multiple shadowings
Simon_068: modulo operator with negative numbers
Simon_069: parameter with field access of field used in function
Simon_070: array assignment of array used in function
Simon_071: simple if-then (constant true)
Simon_072: simple if-then (constant false)
Simon_073: simple if-then-else (constant true)
Simon_074: simple if-then-else (constant false)
Simon_075: boolean variables
Simon_076: boolean fields, including initialization
Simon_077: boolean parameters
Simon_078: ==, != (for ints)
Simon_079: <, >, <=, >=
Simon_080: ==, != (for booleans)
Simon_081: ==, != (for reference types)
Simon_082: unary not
Simon_083: null checks
Simon_084: && and || without need for short circuit
Simon_085: assignment in if condition
Simon_086: non-pure method call in if condition
Simon_087: && and || with short circuit
Simon_088: &&, || in if condition (short circuit)
Simon_089: return in then branch
Simon_090: simple while (false)
Simon_091: simple while (true then false)
Simon_092: one dimensional counting loop
Simon_093: two dimensional counting loop
Simon_094: assignment in while condition
Simon_095: non-pure method call in while condition
Simon_096: &&, || in while condition (short circuit)
Simon_097: if within while
Simon_098: while within if
Simon_099: return within while
Simon_100: nested while/if
Simon_101: factorial (loop version)
Simon_102: factorial (recursive version)
Simon_103: root calculation with binary search
Simon_104: peasant multiplication
Simon_105: prime test
Simon_106: sieve of erathostenes (array version)
Simon_107: sieve of erathostenes (list version)
Simon_108: list length (recursive)
Simon_109: list length (loop)
Simon_110: power function (loop, O(n))
Simon_111: power function (recursion, O(n))
Simon_112: power function (recursion, O(log n))
Simon_113: McCarthy function
Simon_114: fibonacci (O(phi^n))
Simon_115: fibonacci (O(n))
Simon_116: fibonacci (O(log n))
Simon_117: linear congruential generator
Simon_118: quicksort (primitive version on lists)
Simon_119: selection sort
Simon_120: permutation composition
Simon_121: collatz conjecture
Simon_122: array reverse
Simon_123: hirsch index
Simon_124: merge arrays
Simon_125: binomial coefficients (factorial version)
Simon_126: binomial coefficients (recursive version)
Simon_127: binomial coefficients (dynamic programming version)
Simon_128: Ackermann function
Simon_129: horner's method
Simon_130: "ping pong" (mutual recursive calls)
Simon_131: don't optimize 0*X for impure method calls
Simon_132: don't optimize X==X for impure method calls
Simon_133: don't optimize X-X for impure method calls
Simon_134: don't optimize X || X for impure method calls
Simon_135: don't optimize X || X for assignments in X
Simon_136: don't optimize X || X for printing X
Simon_137: don't optimize 0 < X || 0 >= X for impure X
Simon_138: don't optimize X=X for impure X
Simon_139: don't optimize 2*X to X+X for impure X
Simon_140: don't optimize X && false for impure X
Simon_141: test with 10 function parameters
Simon_142: phi madness light
Simon_143: phi madness
