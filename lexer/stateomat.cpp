#include <algorithm>
#include <fstream>
#include <iostream>

#include "stateomat.hpp"

Stateomat::Stateomat() {

	transitions = {{19,19,19,19,19,19,19,19,19, 0, 0,19,19, 0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 0, 6,19,19,19, 6, 7,19, 5, 5, 6, 9, 5,10, 5, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5,11, 6,13, 5,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,19, 5, 6, 3,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 8, 5, 5,19,18,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,19,19,19,19,19,19,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,19,19,19,19, 3,19, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,16,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,12, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,14,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,15,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19, 5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,},
				   {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,16,16,16,16, 0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,},
				   {19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,}};

	state_type = {{ 1, Token::Type::TOKEN_INT_LIT},  { 2, Token::Type::TOKEN_INT_LIT},
				  { 3, Token::Type::TOKEN_IDENT},    { 4, Token::Type::TOKEN_OPERATOR},
				  { 5, Token::Type::TOKEN_OPERATOR}, { 6, Token::Type::TOKEN_OPERATOR},
				  { 7, Token::Type::TOKEN_OPERATOR}, { 8, Token::Type::TOKEN_OPERATOR},
				  { 9, Token::Type::TOKEN_OPERATOR}, {10, Token::Type::TOKEN_OPERATOR},
				  {11, Token::Type::TOKEN_OPERATOR}, {12, Token::Type::TOKEN_OPERATOR},
				  {13, Token::Type::TOKEN_OPERATOR}, {14, Token::Type::TOKEN_OPERATOR},
				  {15, Token::Type::TOKEN_OPERATOR}, {18, Token::Type::TOKEN_EOF}};

	keywords = {"abstract", "assert", "boolean", "break", "byte", "case",
				"catch", "char", "class", "const", "continue", "default",
				"double", "do", "else", "enum", "extends", "false", "finally",
				"final", "float", "for", "goto", "if", "implements", "import",
				"instanceof", "interface", "int", "long", "native", "new",
				"null", "package", "private", "protected", "public", "return",
				"short", "static", "strictfp", "super", "switch",
				"synchronized", "this", "throws", "throw", "transient", "true",
				"try", "void", "volatile", "while"};

	non_accepting_states = {0, 16, 17};
}

bool Stateomat::state_is_accepting(unsigned int state) {
	return non_accepting_states.find(state) == non_accepting_states.end();
}

void Stateomat::dump_graph(std::string const &file_name) {

	std::ofstream f(file_name, std::ios::out | std::ios::binary | std::ios::trunc);
	if (!f.is_open())
	{
		throw 42;
	}

	auto write_line = [&f](int indent_level, std::string const &s) {
		for (int i = 0; i < indent_level; i++)
		{
			f << "    ";
		}
		f << s << std::endl;
	};

	write_line(0, "graph [");

	for (unsigned state = 0; state < transitions.size(); state++) {

		auto label = [&state]() {
			return state == STATE_STOP ? "STOP" : std::to_string(state);
		};

		auto color = [this, &state]() {
			if (state == STATE_STOP) {
				return "#6666FF";
			}
			else if (state_is_accepting(state)) {
				return "#66FF66";
			}
			else {
				return "#FF6666";
			}
		};

		write_line(1, "node [");
		write_line(2, "id " + std::to_string(state));
		write_line(2, "label \"" + label() + "\"");
		write_line(2, "graphics [");
		write_line(3, std::string("fill \"") + color() + std::string("\""));
		write_line(2, "]");
		write_line(1, "]");
	}

	for (unsigned state = 0; state < transitions.size(); state++) {
		std::set<unsigned> reached_states;
		for (auto reached_state : transitions[state])
		{
			reached_states.insert(reached_state);
		}
		reached_states.erase(STATE_STOP);
		for (auto reached_state : reached_states) {

			std::vector<unsigned> label_chars;
			for (unsigned i = 0; i < transitions[state].size(); i++) {
				if (transitions[state][i] == reached_state)
				{
					label_chars.push_back(i);
				}
			}

			std::map<unsigned, std::string> foo;
			for (unsigned i = 0; i <= 128; i++)
			{
				foo.insert({i, "0d" + std::to_string(i)});
			}
			for (unsigned i = '!'; i <= '~'; i++)
			{
				foo[i] = std::string(1, i);
			}
			foo['&']  = "&amp;";
			foo['"']  = "&quot;";
			foo[128]  = "EOF";
			foo['\r'] = "&#92;r";
			foo['\n'] = "&#92;n";
			foo['\t'] = "&#92;t";

			std::string label;
			for (auto label_char : label_chars) {
				label += foo[label_char];
			}

			auto replace = [&label](std::string const &from, std::string const &to) {
				std::size_t i = label.find(from);
				if (i != std::string::npos) {
					label = label.replace(i, from.length(), to);
				}
			};

			replace("ABCDEFGHIJKLMNOPQRSTUVWXYZ", "[A-Z]");
			replace("abcdefghijklmnopqrstuvwxyz", "[a-z]");
			replace("0123456789", "[0-9]");
			replace("123456789", "[1-9]");

			if (label.length() > 20) {
				label = "...";
			}

			write_line(1, "edge [");
			write_line(2, "source " + std::to_string(state));
			write_line(2, "target " + std::to_string(reached_state));
			write_line(2, "label \"" + label + "\"");
			write_line(1, "]");
		}
	}

	write_line(0, "]");

	f.close();
}
